import random
import time

import telebot
import mysql.connector
from requests.exceptions import ReadTimeout, ConnectionError
from telebot import types

from business import *

conn = mysql.connector.connect(
    host='161.97.78.70',
    user='u27820_ILbFuD2aI5',
    password='MIJ=OnRB+ZfrgbGoVU2AE=KO',
    database='s27820_exchanger_bot'
)

cursor = conn.cursor()

ADMIN_ID_LIST = [
    616356243,
    1760269999,
]
IS_DEBUG = False
config = get_config()
CHAT_ID = config["DEBUG_EXCHANGE_REQUEST_CHAT_ID"] if IS_DEBUG else config["EXCHANGE_REQUEST_CHAT_ID"]
AUTHENTICATION_TOKEN = config["DEBUG_AUTHENTICATION_TOKEN"] if IS_DEBUG else config["AUTHENTICATION_TOKEN"]
CHAT_URL = 'https://t.me/+vQm5jYWTWo1iZmMy'
bot = telebot.TeleBot(AUTHENTICATION_TOKEN)


def main():
    bot_config = BotConfig()

    @bot.message_handler(commands=['start'])
    def start(message):
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç. –ú–∏ —Ä–∞–¥—ñ, —â–æ —Ç–∏ –∑–∞–≤—ñ—Ç–∞–≤ –¥–æ –Ω–∞—Å üôÇ\n–ù–∞—à —á–∞—Ç: {CHAT_URL}')
        user_id = message.chat.id
        cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
        user = cursor.fetchall()[0]

        ref_id = message.text.split(" ")[1] if len(message.text.split(" ")) > 1 else None
        if not user:
            cursor.execute(f'INSERT INTO user (id, state, balance) values (' +
                           f'{user_id},' +
                           f' "default",' +
                           f' 0;')
            conn.commit()

            cursor.execute(f'SELECT * FROM user WHERE id = {ref_id};')
            ref = cursor.fetchall()[0]
            if ref:
                cursor.execute(f'UPDATE user SET invited_by = {ref_id} WHERE id = {user_id};')
                conn.commit()
                bot.send_message(int(ref_id), f'–£ –í–∞—Å –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª –∑ ID: {user_id}')
            else:
                admin_id = random.choice(ADMIN_ID_LIST)
                cursor.execute(f'UPDATE user SET invited_by = {admin_id} WHERE id = {user_id};')
                conn.commit()
                bot.send_message(int(admin_id), f'–í–∞–º –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∑ ID: {user_id} —è–∫ –∞–¥–º—ñ–Ω—É')

        bot_config.home(message)

    @bot.message_handler(func=lambda message: True)
    def handle_button_click(message):
        user_id = message.chat.id
        cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
        user = cursor.fetchall()[0]

        if user:
            if message.text == '–ì–æ–ª–æ–≤–Ω–∞':
                bot_config.home(message)
            elif message.text == 'Payeer USD\n' + '–ö–∞—Ä—Ç–∞ UAH':
                bot_config.exchange_payeer_usd_to_uah(message)
            elif message.text == '–†–µ—Ñ–µ—Ä–∞–ª–∏':
                bot_config.refferals(message)
            elif message.text == '–ö—É—Ä—Å –æ–±–º—ñ–Ω—É':
                bot_config.course(message)
            elif message.text == '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞':
                bot_config.support(message)
            elif message.text == '–í–∏–≤–µ—Å—Ç–∏':
                bot_config.withdraw(message)
            elif message.text == '–ê–¥–º—ñ–Ω–∫–∞':
                if user_id in ADMIN_ID_LIST:
                    bot.send_message(message.chat.id, '–í–∏ –≤ –∞–¥–º—ñ–Ω—Ü—ñ', reply_markup=bot_config.admin_markup)
                else:
                    bot.send_message(message.chat.id, '–í–∏ –Ω–µ –∞–¥–º—ñ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!')

            if user_id in ADMIN_ID_LIST:
                cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
                user = cursor.fetchall()[0]
                if user[1] == 'withdraw':
                    bot_config.get_request_for_withdrawal(message)
                elif user[1] == 'confirm_withdraw':
                    bot_config.confirm_withdraw(message)
                elif user[1] == 'confirm_exchange':
                    bot_config.confirm_exchange(message)
                elif user[1] == 'change_payeer_usd_to_uah_course':
                    bot_config.change_payeer_usd_to_uah_course(message)
                elif user[1] == 'change_payeer_account':
                    bot_config.change_payeer_account(message)
                elif user[1] == 'send_allert_for_all_users':
                    bot_config.send_allert_for_all_users(message)

                elif message.text == '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–ø–ª–∞—Ç—É':
                    cursor.execute(f'UPDATE user SET state = "confirm_withdraw" WHERE id = {user_id};')
                    conn.commit()
                    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É, —â–æ –±—É–ª–∞ –≤–∏–ø–ª–∞—á–µ–Ω–∞ –≤ –≥—Ä–Ω, ' +
                                     f'—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª', reply_markup=bot_config.back_markup)
                elif message.text == '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–±–º—ñ–Ω':
                    cursor.execute(f'UPDATE user SET state = "confirm_exchange" WHERE id = {user_id};')
                    conn.commit()
                    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É, —â–æ –±—É–ª–∞ –æ–±–º—ñ–Ω—è–Ω–∞ –≤ –≥—Ä–Ω, ' +
                                     f'—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª', reply_markup=bot_config.back_markup)
                elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å Payeer USD –∫–∞—Ä—Ç–∞ UAH':
                    cursor.execute(f'UPDATE user SET state = "change_payeer_usd_to_uah_course" WHERE id = {user_id};')
                    conn.commit()
                    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å Payeer - UAH –¥–æ 4 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏',
                                     reply_markup=bot_config.back_markup)
                elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ Payeer':
                    cursor.execute(f'UPDATE user SET state = "change_payeer_account" WHERE id = {user_id};')
                    conn.commit()
                    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Payeer –∞–∫–∫–∞—É–Ω—Ç',
                                     reply_markup=bot_config.back_markup)
                elif message.text == '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è':
                    cursor.execute(f'UPDATE user SET state = "send_allert_for_all_users" WHERE id = {user_id};')
                    conn.commit()
                    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
                                     reply_markup=bot_config.back_markup)

        else:
            bot.send_message(message.chat.id, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')

    @bot.message_handler(content_types=['photo'])
    def handle_photo(message):
        user_id = message.chat.id
        config = get_config()
        cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
        user = cursor.fetchall()[0]
        if user:
            photo = message.photo[-1].file_id

            if message.caption:
                bot.send_photo(CHAT_ID, photo, caption=f'–∫—É—Ä—Å: {config["payeer_usd_to_uah"]}\n' +
                                                       f'id —é–∑–µ—Ä–∞: {message.chat.id}\n' +
                                                       f'–∫–æ–º–µ–Ω—Ç —é–∑–µ—Ä–∞: {message.caption}\n' +
                                                       f'username: @{message.from_user.username}\n')

                bot.send_message(message.chat.id, f'–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –û–±–º—ñ–Ω –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω‚ùóÔ∏è',
                                 reply_markup=bot_config.back_markup)
            else:
                bot.send_message(message.chat.id, '–ó–∞—è–≤–∫—É –ù–ï –ø—Ä–∏–π–Ω—è—Ç–æ. –í–∏–∫–æ–Ω—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é‚ùóÔ∏è')

    bot.polling()


class BotConfig:
    home_button = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–∞')
    payeer_usd_to_uah_button = types.KeyboardButton('Payeer USD\n' + '–ö–∞—Ä—Ç–∞ UAH')
    refferals_button = types.KeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª–∏')
    course_button = types.KeyboardButton('–ö—É—Ä—Å –æ–±–º—ñ–Ω—É')
    support_button = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
    withdraw_button = types.KeyboardButton('–í–∏–≤–µ—Å—Ç–∏')
    admin_options_button = types.KeyboardButton('–ê–¥–º—ñ–Ω–∫–∞')
    admin_confirm_withdraw_button = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–ø–ª–∞—Ç—É')
    admin_confirm_exchange_button = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–±–º—ñ–Ω')
    admin_change_payeer_usd_to_uah_course_button = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å Payeer USD –∫–∞—Ä—Ç–∞ UAH')
    admin_change_payeer_account_button = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ Payeer')
    admin_send_alert_for_all_users_button = types.KeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')

    back_markup = types.ReplyKeyboardMarkup(row_width=1)
    home_markup = types.ReplyKeyboardMarkup(row_width=2)
    admin_markup = types.ReplyKeyboardMarkup(row_width=2)
    refferals_markup = types.ReplyKeyboardMarkup(row_width=2)
    back_markup.add(
        home_button,
    )

    home_markup.add(
        payeer_usd_to_uah_button,
        refferals_button,
        course_button,
        support_button,
        admin_options_button,
    )

    refferals_markup.add(
        withdraw_button,
        home_button
    )

    admin_markup.add(
        admin_confirm_withdraw_button,
        admin_confirm_exchange_button,
        admin_change_payeer_usd_to_uah_course_button,
        admin_change_payeer_account_button,
        admin_send_alert_for_all_users_button,
        home_button,
    )

    def __init__(self):
        pass

    def refferals(self, message):
        config = get_config()
        cursor.execute(f'SELECT * FROM user WHERE id = {message.chat.id};')
        user = cursor.fetchall()[0]

        cursor.execute(f'SELECT id FROM user WHERE invited_by = {user[0]};')
        invited_user_count = len(cursor.fetchall())

        bot.send_message(message.chat.id,
                         f'–í–∞—à –±–∞–ª–∞–Ω—Å: {float(user[2])} –≥—Ä–Ω\n' +
                         f'–£—Å—å–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {invited_user_count}\n' +
                         f'–í–∞—à URL –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: https://t.me/green_exchanger_bot?start={message.chat.id}\n' +
                         f'–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ {config["ref_percent"]}% –≤—ñ–¥ —Å—É–º–∏ –æ–±–º—ñ–Ω—É –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤',
                         reply_markup=self.refferals_markup)

    def get_request_for_withdrawal(self, message):
        user_id = message.chat.id
        cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
        user = cursor.fetchall()[0]
        user_answer = message.text
        print(user_answer)
        user_balance = user[2]
        if len(user_answer.split()) == 2:
            card_number, withdraw_money = user_answer.split()
            withdraw_money = withdraw_money.replace(' ', '')
            card_number = card_number.replace(' ', '')
            if len(card_number) == 16:
                try:
                    int(card_number)
                except ValueError:
                    bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –º–æ–∂–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –ª–∏—à–µ –∑ 16 —Ü–∏—Ñ—Ä',
                                     reply_markup=self.back_markup)
                    return

                try:
                    float(withdraw_money)
                except ValueError:
                    bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–∞–ª—ñ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –º—ñ—Å—Ü—ñ —Å—É–º–∏ –¥–ª—è –≤–∏–≤–æ–¥—É',
                                     reply_markup=self.back_markup)
                    return

                if float(withdraw_money) < 1:
                    bot.send_message(message.chat.id,
                                     f'–°—É–º–∞ –º–µ–Ω—à–µ 1–≥—Ä–Ω‚ùóÔ∏è',
                                     reply_markup=self.back_markup)
                elif float(withdraw_money) <= user_balance:
                    cursor.execute(f'UPDATE user SET balance = ' +
                                   f'{user[2] - round(float(withdraw_money), 2)} WHERE id = {user[0]};')
                    conn.commit()
                    bot.send_message(CHAT_ID, f'id: {message.chat.id}\n' +
                                     f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: {card_number}\n' +
                                     f'–°—É–º–∞ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏: {round(float(withdraw_money), 2)}–≥—Ä–Ω\n' +
                                     f'@{message.from_user.username}')
                    bot.send_message(message.chat.id,
                                     f'–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –í–∏–ø–ª–∞—Ç–∞ {round(float(withdraw_money), 2)}–≥—Ä–Ω ' +
                                     f'–≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω‚ùóÔ∏è',
                                     reply_markup=self.back_markup)
                else:
                    bot.send_message(message.chat.id,
                                     f'–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è —Å—É–º–∞ –¥–ª—è –≤–∏–≤–æ–¥—É –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ‚ùóÔ∏è',
                                     reply_markup=self.back_markup)
            else:
                bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –º–æ–∂–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –ª–∏—à–µ –∑ 16 —Ü–∏—Ñ—Ä',
                                 reply_markup=self.back_markup)
        else:
            if user_answer != "–í–∏–≤–µ—Å—Ç–∏":
                bot.send_message(message.chat.id, '–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ —Ç–∞ —Å—É–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                                 reply_markup=self.back_markup)

    def withdraw(self, message):
        user_id = message.chat.id
        cursor.execute(f'UPDATE user SET state = "withdraw" WHERE id = {user_id};')
        conn.commit()
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ + —Å—É–º—É –¥–ª—è –≤–∏–≤–æ–¥—É –≤—ñ–¥ 1–≥—Ä–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                         reply_markup=self.back_markup)

    def confirm_withdraw(self, message):
        user_answer = message.text
        if len(user_answer.split()) == 2:
            user_id, withdraw_sum = user_answer.split()
            user_id = int(user_id.replace(' ', ''))
            try:
                float(withdraw_sum)
            except ValueError:
                bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —Å—É–º—É –≤–∏–ø–ª–∞—Ç–∏', reply_markup=self.back_markup)

            cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
            user = cursor.fetchall()[0]

            if user:
                bot.send_message(message.chat.id, '–í–∏–ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', reply_markup=self.back_markup)
                bot.send_message(user_id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É {withdraw_sum}–≥—Ä–Ω –≤–∏–∫–æ–Ω–∞–Ω–∞')
            else:
                bot.send_message(message.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', reply_markup=self.back_markup)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                             reply_markup=self.back_markup)

    def confirm_exchange(self, message):
        user_answer = message.text
        config = get_config()
        if len(user_answer.split()) == 2:
            user_id, withdraw_sum = user_answer.split()
            user_id = int(user_id.replace(' ', ''))
            try:
                float(withdraw_sum)
            except ValueError:
                bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —Å—É–º—É –æ–±–º—ñ–Ω—É', reply_markup=self.back_markup)

            cursor.execute(f'SELECT * FROM user WHERE id = {user_id};')
            user = cursor.fetchall()[0]

            if user:
                cursor.execute(f'SELECT * FROM user WHERE id = {user[3]};')
                ref = cursor.fetchall()[0]
                cursor.execute(f'UPDATE user SET balance = ' +
                               f'{ref[2] + (round(float(withdraw_sum) * (config["ref_percent"] / 100), 4))} ' +
                               f'WHERE id = {ref[0]};')
                conn.commit()
                bot.send_message(message.chat.id, '–û–±–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', reply_markup=self.back_markup)
                bot.send_message(user_id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º—ñ–Ω {withdraw_sum}–≥—Ä–Ω –≤–∏–∫–æ–Ω–∞–Ω–∞')
            else:
                bot.send_message(message.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', reply_markup=self.back_markup)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                             reply_markup=self.back_markup)

    def change_payeer_usd_to_uah_course(self, message):
        user_answer = message.text
        try:
            float(user_answer)
        except ValueError:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ', reply_markup=self.back_markup)
            return

        set_payeer_usd_to_uah_course(round(float(user_answer), 2))
        bot.send_message(message.chat.id, f'–ö—É—Ä—Å {round(float(user_answer), 2)} –∑–∞ 1$ Payeer –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                         reply_markup=self.back_markup)

    def change_payeer_account(self, message):
        payeer_account = message.text
        set_payeer_account(payeer_account)
        bot.send_message(message.chat.id, 'Payeer –∞–∫–∞—É–Ω—Ç –¥–ª—è –æ–±–º—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ', reply_markup=self.back_markup)

    def send_allert_for_all_users(self, message):
        cursor.execute(f'SELECT * FROM user')
        users = cursor.fetchall()

        for user in users:
            user_id = user[0]
            bot.send_message(user_id, message.text)

        bot.send_message(message.chat.id, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞',
                         reply_markup=self.back_markup)

    def home(self, message):
        user_id = message.chat.id
        cursor.execute(f'UPDATE user SET state = "default" WHERE id = {user_id};')
        conn.commit()
        bot.send_message(message.chat.id, '–í–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π!', reply_markup=self.home_markup)

    def exchange_payeer_usd_to_uah(self, message):
        config = get_config()
        bot.send_message(message.chat.id,
                         f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å—É–º—É –¥–ª—è –æ–±–º—ñ–Ω—É –Ω–∞ {config["payeer_account"]} –≤—ñ–¥ 0.2$ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: –í–∞—à–∞_–∫–∞—Ä—Ç–∞.')
        bot.send_message(message.chat.id, f'–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω –ø–µ—Ä–µ–∫–∞–∑—É –≤ –±–æ—Ç —Ç–∞ –≤ –æ–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏, ' +
                         f'–ª–∏—à–µ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑–∞—è–≤–∫—É –±—É–¥–µ –ø—Ä–∏–π–Ω—è—Ç–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –æ–±–º—ñ–Ω—É - 48 –≥–æ–¥–∏–Ω',
                         reply_markup=self.back_markup)

    def course(self, message):
        config = get_config()
        bot.send_message(message.chat.id, f'–ö—É—Ä—Å –Ω–∞ {datetime.now().strftime("%Y.%m.%d")}\n' +
                         f'1 Payeer USD ‚û°Ô∏è {config["payeer_usd_to_uah"]} UAH', reply_markup=self.back_markup)

    def support(self, message):
        bot.send_message(message.chat.id,
                         f'–ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: @arobotok202118 —Ç–∞ @systnager',
                         reply_markup=self.back_markup)


if __name__ == '__main__':
    while True:
        try:
            main()
        except (ReadTimeout, ConnectionError):
            print_log("Error with Internet connection")
            time.sleep(1)
            continue
