import random
import time
import os

import telebot
from dotenv import load_dotenv
from requests.exceptions import ReadTimeout, ConnectionError

from bot import BotConfig
from business import *
from database import get_item, update_item, write_new_item

load_dotenv()
ADMIN_ID_LIST = [
    616356243,
    1760269999,
]
IS_DEBUG = True if os.getenv('IS_DEBUG') == "True" else False
CHAT_ID = os.getenv('DEBUG_EXCHANGE_REQUEST_CHAT_ID') if IS_DEBUG else os.getenv('EXCHANGE_REQUEST_CHAT_ID')
AUTHENTICATION_TOKEN = os.getenv('DEBUG_AUTHENTICATION_TOKEN') if IS_DEBUG else os.getenv('AUTHENTICATION_TOKEN')
CHAT_URL = 'https://t.me/+vQm5jYWTWo1iZmMy'
bot = telebot.TeleBot(AUTHENTICATION_TOKEN)


def main():
    bot_config = BotConfig(bot)

    @bot.message_handler(commands=['start'])
    def start(message):
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç. –ú–∏ —Ä–∞–¥—ñ, —â–æ —Ç–∏ –∑–∞–≤—ñ—Ç–∞–≤ –¥–æ –Ω–∞—Å üôÇ\n–ù–∞—à —á–∞—Ç: {CHAT_URL}')
        user_id = message.chat.id
        user = get_item('user', '*', ['id', [user_id]])[0]

        ref_id = message.text.split(" ")[1] if len(message.text.split(" ")) > 1 else None
        if not user:
            write_new_item('user', ['id', 'state', 'balance'], [user_id, 'default', 0])
            ref = get_item('user', '*', ['id'], [ref_id])[0]
            if ref:
                update_item('user', ['invited_by'], [ref_id], ['id'], [user_id])
                bot.send_message(int(ref_id), f'–£ –í–∞—Å –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª –∑ ID: {user_id}')
            else:
                admin_id = random.choice(ADMIN_ID_LIST)
                update_item('user', ['invited_by'], [admin_id],
                            ['id'], [user_id])
                bot.send_message(int(admin_id), f'–í–∞–º –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∑ ID: {user_id} —è–∫ –∞–¥–º—ñ–Ω—É')

        bot_config.home(message)

    @bot.message_handler(func=lambda message: True)
    def handle_button_click(message):
        user_id = message.chat.id
        user = get_item('user', '*', ['id'], [user_id])

        if user:
            if message.text == '–ì–æ–ª–æ–≤–Ω–∞':
                bot_config.home(message)
            elif message.text == 'Payeer USD\n' + '–ö–∞—Ä—Ç–∞ UAH':
                bot_config.exchange_payeer_usd_to_uah(message)
            elif message.text == '–†–µ—Ñ–µ—Ä–∞–ª–∏':
                bot_config.refferals(message)
            elif message.text == '–ö—É—Ä—Å –æ–±–º—ñ–Ω—É':
                bot_config.course(message)
            elif message.text == '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞':
                bot_config.support(message)
            elif message.text == '–í–∏–≤–µ—Å—Ç–∏':
                bot_config.withdraw(message)
            elif message.text == '–ê–¥–º—ñ–Ω–∫–∞':
                if user_id in ADMIN_ID_LIST:
                    bot.send_message(message.chat.id, '–í–∏ –≤ –∞–¥–º—ñ–Ω—Ü—ñ', reply_markup=bot_config.admin_markup)
                else:
                    bot.send_message(message.chat.id, '–í–∏ –Ω–µ –∞–¥–º—ñ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!')

            if user_id in ADMIN_ID_LIST:
                user = get_item('user', '*', ['id'], [user_id])
                if user:
                    user = user[0]
                    if user[1] == 'withdraw':
                        bot_config.get_request_for_withdrawal(message)
                    elif user[1] == 'confirm_withdraw':
                        bot_config.confirm_withdraw(message)
                    elif user[1] == 'confirm_exchange':
                        bot_config.confirm_exchange(message)
                    elif user[1] == 'change_payeer_usd_to_uah_course':
                        bot_config.change_payeer_usd_to_uah_course(message)
                    elif user[1] == 'change_payeer_account':
                        bot_config.change_payeer_account(message)
                    elif user[1] == 'send_allert_for_all_users':
                        bot_config.send_allert_for_all_users(message)

                    elif message.text == '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–ø–ª–∞—Ç—É':
                        update_item('user', ['state'], ['confirm_withdraw'], ['id'], [user_id])
                        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É, —â–æ –±—É–ª–∞ –≤–∏–ø–ª–∞—á–µ–Ω–∞ –≤ –≥—Ä–Ω, ' +
                                         f'—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª', reply_markup=bot_config.back_markup)
                    elif message.text == '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–±–º—ñ–Ω':
                        update_item('user', ['state'], ['confirm_exchange'], ['id'], [user_id])
                        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É, —â–æ –±—É–ª–∞ –æ–±–º—ñ–Ω—è–Ω–∞ –≤ –≥—Ä–Ω, ' +
                                         f'—á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª', reply_markup=bot_config.back_markup)
                    elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å Payeer USD –∫–∞—Ä—Ç–∞ UAH':
                        update_item('user', ['state'], ['change_payeer_usd_to_uah_course'], ['id'], [user_id])
                        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å Payeer - UAH –¥–æ 4 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏',
                                         reply_markup=bot_config.back_markup)
                    elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ Payeer':
                        update_item('user', ['state'], ['change_payeer_account'], ['id'], [user_id])
                        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Payeer –∞–∫–∫–∞—É–Ω—Ç',
                                         reply_markup=bot_config.back_markup)
                    elif message.text == '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è':
                        update_item('user', ['state'], ['send_allert_for_all_users'], ['id'], [user_id])
                        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
                                         reply_markup=bot_config.back_markup)

        else:
            bot.send_message(message.chat.id, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')

    @bot.message_handler(content_types=['photo'])
    def handle_photo(message):
        user_id = message.chat.id
        config = get_config()
        user = get_item('user', '*', ['id'], [user_id])
        if user:
            photo = message.photo[-1].file_id

            if message.caption:
                bot.send_photo(CHAT_ID, photo, caption=f'–∫—É—Ä—Å: {config["payeer_usd_to_uah"]}\n' +
                                                       f'id —é–∑–µ—Ä–∞: {message.chat.id}\n' +
                                                       f'–∫–æ–º–µ–Ω—Ç —é–∑–µ—Ä–∞: {message.caption}\n' +
                                                       f'username: @{message.from_user.username}\n')

                bot.send_message(message.chat.id, f'–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –û–±–º—ñ–Ω –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω‚ùóÔ∏è',
                                 reply_markup=bot_config.back_markup)
            else:
                bot.send_message(message.chat.id, '–ó–∞—è–≤–∫—É –ù–ï –ø—Ä–∏–π–Ω—è—Ç–æ. –í–∏–∫–æ–Ω—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é‚ùóÔ∏è')

    bot.polling()


if __name__ == '__main__':
    while True:
        try:
            main()
        except (ReadTimeout, ConnectionError):
            print_log("Error with Internet connection")
            time.sleep(1)
            continue
