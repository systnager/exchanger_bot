import os
import random

import telebot
from dotenv import load_dotenv
from telebot import types
from telebot.apihelper import ApiTelegramException

from business import is_numeric, get_config, set_payeer_account, set_payeer_usd_to_uah_course, is_card_number_valid, datetime

load_dotenv()
ADMIN_ID_LIST = [
    616356243,
    1760269999,
]
IS_DEBUG = True if os.getenv('IS_DEBUG') == "True" else False
CHAT_ID = os.getenv('DEBUG_EXCHANGE_REQUEST_CHAT_ID') if IS_DEBUG else os.getenv('EXCHANGE_REQUEST_CHAT_ID')
AUTHENTICATION_TOKEN = os.getenv('DEBUG_AUTHENTICATION_TOKEN') if IS_DEBUG else os.getenv('AUTHENTICATION_TOKEN')
CHAT_URL = 'https://t.me/+vQm5jYWTWo1iZmMy'


class BotConfig:
    home_button = types.KeyboardButton('–ì–æ–ª–æ–≤–Ω–∞')
    payeer_usd_to_uah_button = types.KeyboardButton('Payeer USD\n' + '–ö–∞—Ä—Ç–∞ UAH')
    refferals_button = types.KeyboardButton('–†–µ—Ñ–µ—Ä–∞–ª–∏')
    course_button = types.KeyboardButton('–ö—É—Ä—Å –æ–±–º—ñ–Ω—É')
    support_button = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞')
    withdraw_button = types.KeyboardButton('–í–∏–≤–µ—Å—Ç–∏')
    admin_options_button = types.KeyboardButton('–ê–¥–º—ñ–Ω–∫–∞')
    admin_confirm_withdraw_button = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–ø–ª–∞—Ç—É')
    admin_confirm_exchange_button = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–±–º—ñ–Ω')
    admin_change_payeer_usd_to_uah_course_button = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å Payeer USD –∫–∞—Ä—Ç–∞ UAH')
    admin_change_payeer_account_button = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ Payeer')
    admin_send_alert_for_all_users_button = types.KeyboardButton('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è')

    back_markup = types.ReplyKeyboardMarkup(row_width=1)
    home_markup = types.ReplyKeyboardMarkup(row_width=2)
    admin_markup = types.ReplyKeyboardMarkup(row_width=2)
    refferals_markup = types.ReplyKeyboardMarkup(row_width=2)
    back_markup.add(
        home_button,
    )

    home_markup.add(
        payeer_usd_to_uah_button,
        refferals_button,
        course_button,
        support_button,
        admin_options_button,
    )

    refferals_markup.add(
        withdraw_button,
        home_button
    )

    admin_markup.add(
        admin_confirm_withdraw_button,
        admin_confirm_exchange_button,
        admin_change_payeer_usd_to_uah_course_button,
        admin_change_payeer_account_button,
        admin_send_alert_for_all_users_button,
        home_button,
    )

    def __init__(self, database):
        self.bot = telebot.TeleBot(AUTHENTICATION_TOKEN)
        self.database = database

        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç. –ú–∏ —Ä–∞–¥—ñ, —â–æ —Ç–∏ –∑–∞–≤—ñ—Ç–∞–≤ –¥–æ –Ω–∞—Å üôÇ\n–ù–∞—à —á–∞—Ç: {CHAT_URL}')
            user_id = message.chat.id
            user = self.database.get_item('user', '*', {'id': user_id})
            ref_id = message.text.split(" ")[1] if len(message.text.split(" ")) > 1 else random.choice(ADMIN_ID_LIST)
            if not user:
                self._register_new_user(message, user_id, ref_id)

            self.home(message)

        @self.bot.message_handler(func=lambda message: True)
        def handle_button_click(message):
            user_id = message.chat.id
            user = self.database.get_item('user', '*', {'id': user_id})

            user_action = {
                '–ì–æ–ª–æ–≤–Ω–∞': lambda: self.home(message),
                'Payeer USD\n–ö–∞—Ä—Ç–∞ UAH': lambda: self.exchange_payeer_usd_to_uah(message),
                '–†–µ—Ñ–µ—Ä–∞–ª–∏': lambda: self.refferals(message),
                '–ö—É—Ä—Å –æ–±–º—ñ–Ω—É': lambda: self.course(message),
                '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞': lambda: self.support(message),
                '–í–∏–≤–µ—Å—Ç–∏': lambda: self.withdraw(message),
            }

            admin_action = {
                '–ê–¥–º—ñ–Ω–∫–∞': lambda: self.bot.send_message(message.chat.id, '–í–∏ –≤ –∞–¥–º—ñ–Ω—Ü—ñ',
                                                         reply_markup=self.admin_markup),
                '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–ø–ª–∞—Ç—É': lambda: self.set_confirm_withdraw_state(message),
                '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–±–º—ñ–Ω': lambda: self.set_confirm_exchange_state(message),
                '–ó–º—ñ–Ω–∏—Ç–∏ –∫—É—Ä—Å Payeer USD –∫–∞—Ä—Ç–∞ UAH': lambda: self.set_change_payeer_usd_to_uah_course_state(message),
                '–ó–º—ñ–Ω–∏—Ç–∏ Payeer': lambda: self.set_change_payeer_account_state(message),
                '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è': lambda: self.set_send_alert_for_all_users_state(message),

                'withdraw': lambda: self.get_request_for_withdrawal(message),
                'confirm_withdraw': lambda: self.confirm_withdraw(message),
                'confirm_exchange': lambda: self.confirm_exchange(message),
                'change_payeer_usd_to_uah_course': lambda: self.change_payeer_usd_to_uah_course(message),
                'change_payeer_account': lambda: self.change_payeer_account(message),
                'send_alert_for_all_users': lambda: self.send_alert_for_all_users(message),
            }

            if user:
                if message.text in user_action:
                    user_action[message.text]()
                if user_id in ADMIN_ID_LIST:
                    user = self.database.get_item('user', '*', {'id': user_id})
                    user = user[0]
                    if message.text in admin_action:
                        admin_action[message.text]()
                    elif user[1] in admin_action:
                        admin_action[user[1]]()
            else:
                self.bot.send_message(message.chat.id, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start')

        @self.bot.message_handler(content_types=['photo'])
        def handle_photo(message):
            user_id = message.chat.id
            payeer_usd_to_uah = get_config()['payeer_usd_to_uah']
            user = self.database.get_item('user', '*', {'id': user_id})
            if user and message.caption:
                photo = message.photo[-1].file_id
                self.bot.send_photo(CHAT_ID, photo, caption=f'–∫—É—Ä—Å: {payeer_usd_to_uah}\n' +
                                                            f'id —é–∑–µ—Ä–∞: {message.chat.id}\n' +
                                                            f'–∫–æ–º–µ–Ω—Ç —é–∑–µ—Ä–∞: {message.caption}\n' +
                                                            f'username: @{message.from_user.username}\n')

                self.bot.send_message(message.chat.id, f'–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –û–±–º—ñ–Ω –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω‚ùóÔ∏è',
                                      reply_markup=self.back_markup)
            else:
                self.bot.send_message(message.chat.id, '–ó–∞—è–≤–∫—É –ù–ï –ø—Ä–∏–π–Ω—è—Ç–æ. –í–∏–∫–æ–Ω—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é‚ùóÔ∏è')

    def start(self):
        self.bot.polling()

    def refferals(self, message):
        config = get_config()
        user = self.database.get_item('user', '*', {'id': message.chat.id})[0]

        invited_user_count = len(self.database.get_item('user', ['id'], {'invited_by': user[0]}))

        self.bot.send_message(message.chat.id,
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {float(user[2])} –≥—Ä–Ω\n' +
                              f'–£—Å—å–æ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {invited_user_count}\n' +
                              f'–í–∞—à URL –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: https://t.me/green_exchanger_bot?start={message.chat.id}\n' +
                              f'–í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ {config["ref_percent"]}% –≤—ñ–¥ —Å—É–º–∏ –æ–±–º—ñ–Ω—É –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤',
                              reply_markup=self.refferals_markup)

    def get_request_for_withdrawal(self, message):
        user_id = message.chat.id
        user = self.database.get_item('user', '*', {'id': user_id})[0]
        user_answer = message.text
        user_balance = user[2]
        if len(user_answer.split()) == 2:
            card_number, withdraw_money = user_answer.split()
            withdraw_money = withdraw_money.replace(' ', '')
            card_number = card_number.replace(' ', '')
            print(is_card_number_valid(card_number))
            if is_card_number_valid(card_number) and is_numeric(withdraw_money):
                withdraw_money = float(withdraw_money)
                if withdraw_money < 1:
                    self.bot.send_message(message.chat.id, f'–°—É–º–∞ –º–µ–Ω—à–µ 1–≥—Ä–Ω‚ùóÔ∏è', reply_markup=self.back_markup)
                elif withdraw_money <= user_balance:
                    self.database.update_item('user', {'balance': user[2] - round(withdraw_money, 2)}, {'id': user[0]})
                    self.bot.send_message(CHAT_ID, f'id: {message.chat.id}\n' +
                                          f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: {card_number}\n' +
                                          f'–°—É–º–∞ –¥–ª—è –≤–∏–ø–ª–∞—Ç–∏: {round(withdraw_money, 2)}–≥—Ä–Ω\n' +
                                          f'@{message.from_user.username}')
                    self.bot.send_message(message.chat.id,
                                          f'–ó–∞—è–≤–∫—É –ø—Ä–∏–π–Ω—è—Ç–æ. –í–∏–ø–ª–∞—Ç–∞ {round(withdraw_money, 2)}–≥—Ä–Ω ' +
                                          f'–≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º 48 –≥–æ–¥–∏–Ω‚ùóÔ∏è',
                                          reply_markup=self.back_markup)
                else:
                    self.bot.send_message(message.chat.id,
                                          f'–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è —Å—É–º–∞ –¥–ª—è –≤–∏–≤–æ–¥—É –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ‚ùóÔ∏è',
                                          reply_markup=self.back_markup)
            else:
                self.bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ –º–æ–∂–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –ª–∏—à–µ –∑ 16 —Ü–∏—Ñ—Ä!',
                                      reply_markup=self.back_markup)
                self.bot.send_message(message.chat.id, '–°—É–º–∞ –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –¥—ñ–π—Å–Ω–∏–º —á–∏—Å–ª–æ–º!',
                                      reply_markup=self.back_markup)
        else:
            if user_answer != "–í–∏–≤–µ—Å—Ç–∏":
                self.bot.send_message(message.chat.id, '–ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ —Ç–∞ —Å—É–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª')
                self.bot.send_message(message.chat.id, '–û—Å—å –ø—Ä–∏–∫–ª–∞–¥, —è–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ñ: 4114544287780987 1.23',
                                      reply_markup=self.back_markup)

    def withdraw(self, message):
        user_id = message.chat.id
        self.database.update_item('user', {'state': 'withdraw'}, {'id': user_id})
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ + —Å—É–º—É –¥–ª—è –≤–∏–≤–æ–¥—É –≤—ñ–¥ 1–≥—Ä–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                              reply_markup=self.back_markup)

    def confirm_withdraw(self, message):
        user_answer = message.text
        if len(user_answer.split()) == 2:
            user_id, withdraw_sum = user_answer.split()
            user_id = int(user_id.replace(' ', ''))
            if is_numeric(withdraw_sum):
                user = self.database.get_item('user', '*', {'id': user_id})
                if user:
                    self.bot.send_message(message.chat.id, '–í–∏–ø–ª–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
                                          reply_markup=self.back_markup)
                    self.bot.send_message(user_id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–ø–ª–∞—Ç—É {withdraw_sum}–≥—Ä–Ω –≤–∏–∫–æ–Ω–∞–Ω–∞')
                else:
                    self.bot.send_message(message.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', reply_markup=self.back_markup)
            else:
                self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —Å—É–º—É –≤–∏–ø–ª–∞—Ç–∏', reply_markup=self.back_markup)
        else:
            self.bot.send_message(message.chat.id, '–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                                  reply_markup=self.back_markup)

    def confirm_exchange(self, message):
        user_answer = message.text
        config = get_config()
        if len(user_answer.split()) == 2:
            user_id, withdraw_sum = user_answer.split()
            user_id = int(user_id.replace(' ', ''))
            if is_numeric(withdraw_sum):
                withdraw_sum = float(withdraw_sum)
                user = self.database.get_item('user', '*', {'id': user_id})
                if user:
                    user = user[0]
                    self.bot.send_message(message.chat.id, '–û–±–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', reply_markup=self.back_markup)
                    self.bot.send_message(user_id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º—ñ–Ω {withdraw_sum}–≥—Ä–Ω –≤–∏–∫–æ–Ω–∞–Ω–∞')
                    if len(user) == 4:
                        print(user)
                        ref = self.database.get_item('user', '*', {'id': user[3] if user[3] is not None else 'NULL'})
                        if ref:
                            ref = ref[0]
                            self.database.update_item('user', {
                                'balance': ref[2] + (round(withdraw_sum * (config["ref_percent"] / 100), 4))
                            }, {'id': ref[0]})
                else:
                    self.bot.send_message(message.chat.id, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', reply_markup=self.back_markup)
            else:
                self.bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∫–∞–∑–∞–Ω–æ —Å—É–º—É –æ–±–º—ñ–Ω—É', reply_markup=self.back_markup)
        else:
            self.bot.send_message(message.chat.id, '–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω–Ω—ñ. –í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                                  reply_markup=self.back_markup)

    def change_payeer_usd_to_uah_course(self, message):
        user_answer = message.text
        if is_numeric(user_answer):
            user_answer = float(user_answer)
            set_payeer_usd_to_uah_course(round(user_answer, 2))
            self.bot.send_message(message.chat.id, f'–ö—É—Ä—Å {round(user_answer, 2)} –∑–∞ 1$ Payeer –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                                  reply_markup=self.back_markup)
        else:
            self.bot.send_message(message.chat.id, '–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ', reply_markup=self.back_markup)

    def change_payeer_account(self, message):
        payeer_account = message.text
        set_payeer_account(payeer_account)
        self.bot.send_message(message.chat.id, 'Payeer –∞–∫–∞—É–Ω—Ç –¥–ª—è –æ–±–º—ñ–Ω—É –∑–º—ñ–Ω–µ–Ω–æ', reply_markup=self.back_markup)

    def send_alert_for_all_users(self, message):
        self.bot.send_message(message.chat.id, '–ó–∞—á–µ–∫–∞–π—Ç–µ, –Ω–∞–¥—Å–∏–ª–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', reply_markup=self.back_markup)
        for user in self.database.get_item('user', '*'):
            user_id = user[0]
            try:
                self.bot.send_message(user_id, message.text)
            except ApiTelegramException:
                continue
        self.bot.send_message(message.chat.id, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞',
                              reply_markup=self.back_markup)

    def set_confirm_withdraw_state(self, message):
        self.database.update_item('user', {'state': 'confirm_withdraw'}, {'id': message.chat.id})
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É, —â–æ –±—É–ª–∞ –≤–∏–ø–ª–∞—á–µ–Ω–∞ –≤ –≥—Ä–Ω, —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                              reply_markup=self.back_markup)

    def set_confirm_exchange_state(self, message):
        self.database.update_item('user', {'state': 'confirm_exchange'}, {'id': message.chat.id})
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Å—É–º—É, —â–æ –±—É–ª–∞ –æ–±–º—ñ–Ω—è–Ω–∞ –≤ –≥—Ä–Ω, —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                              reply_markup=self.back_markup)

    def set_change_payeer_usd_to_uah_course_state(self, message):
        self.database.update_item('user', {'state': 'change_payeer_usd_to_uah_course'}, {'id': message.chat.id})
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å Payeer - UAH –¥–æ 4 –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏',
                              reply_markup=self.back_markup)

    def set_change_payeer_account_state(self, message):
        self.database.update_item('user', {'state': 'change_payeer_account'}, {'id': message.chat.id})
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π Payeer –∞–∫–∫–∞—É–Ω—Ç', reply_markup=self.back_markup)

    def set_send_alert_for_all_users_state(self, message):
        self.database.update_item('user', {'state': 'send_alert_for_all_users'}, {'id': message.chat.id})
        self.bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', reply_markup=self.back_markup)

    def home(self, message):
        user_id = message.chat.id
        self.database.update_item('user', {'state': 'default'}, {'id': user_id})
        self.bot.send_message(message.chat.id, '–í–∏ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π!', reply_markup=self.home_markup)

    def exchange_payeer_usd_to_uah(self, message):
        config = get_config()
        self.bot.send_message(message.chat.id,
                              f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å—É–º—É –¥–ª—è –æ–±–º—ñ–Ω—É –Ω–∞ {config["payeer_account"]} –≤—ñ–¥ 0.2$ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: –í–∞—à–∞_–∫–∞—Ä—Ç–∞.')
        self.bot.send_message(message.chat.id,
                              f'–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω –ø–µ—Ä–µ–∫–∞–∑—É –≤ –±–æ—Ç —Ç–∞ –≤ –æ–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏, –ª–∏—à–µ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑–∞—è–≤–∫—É –±—É–¥–µ –ø—Ä–∏–π–Ω—è—Ç–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –æ–±–º—ñ–Ω—É - 48 –≥–æ–¥–∏–Ω',
                              reply_markup=self.back_markup)

    def course(self, message):
        config = get_config()
        self.bot.send_message(message.chat.id,
                              f'–ö—É—Ä—Å –Ω–∞ {datetime.now().strftime("%Y.%m.%d")}\n1 Payeer USD ‚û°Ô∏è {config["payeer_usd_to_uah"]} UAH',
                              reply_markup=self.back_markup)

    def support(self, message):
        self.bot.send_message(message.chat.id, f'–ö–æ–Ω—Ç–∞–∫—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: @arobotok202118 —Ç–∞ @systnager',
                              reply_markup=self.back_markup)

    def _register_new_user(self, message, user_id, ref_id):
        self.database.write_new_item('user', {
            'id': user_id,
            'state': 'default',
            'balance': 0,
        })
        ref = self.database.get_item('user', '*', {'id': ref_id})
        if ref:
            if ref_id in ADMIN_ID_LIST:
                self.database.update_item('user', {'invited_by': ref_id}, {'id': user_id})
                self.bot.send_message(int(ref_id), f'–í–∞–º –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –≤—ñ–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∑ ID: {user_id} —è–∫ –∞–¥–º—ñ–Ω—É')
            else:
                self.database.update_item('user', {'invited_by': ref_id}, {'id': user_id})
                self.bot.send_message(int(ref_id), f'–£ –í–∞—Å –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª –∑ ID: {user_id}')
        else:
            self.bot.send_message(message.chat.id, f'–í–∞—Å –ù–ï –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞')
